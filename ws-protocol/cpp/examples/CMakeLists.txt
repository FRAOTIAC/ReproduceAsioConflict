cmake_minimum_required(VERSION 3.14)
project(foxglove_proto CXX)
find_package(Boost REQUIRED COMPONENTS system)
find_package(OpenSSL REQUIRED)
find_package(Protobuf 3 REQUIRED)
find_package(ZLIB)


if(CMAKE_CROSSCOMPILING)
    message(STATUS "Cross compiling, using host protoc")
else()
    set(_PROTOBUF_PROTOC $<TARGET_FILE:protobuf::protoc>)
endif()

FILE(GLOB all_protos "${CMAKE_CURRENT_SOURCE_DIR}/proto/foxglove/*.proto")

FOREACH(f ${all_protos})
    file(RELATIVE_PATH f ${CMAKE_CURRENT_SOURCE_DIR}/proto ${f})
    STRING(REGEX REPLACE "\\.proto$" "" f ${f})
    LIST(APPEND proto_sources "autogenerated_protobuf/${f}.pb.h")
    LIST(APPEND proto_sources "autogenerated_protobuf/${f}.pb.cc")
ENDFOREACH(f)

add_custom_command(
        OUTPUT ${proto_sources}
        COMMAND ${CMAKE_COMMAND} -E make_directory autogenerated_protobuf
        COMMAND ${Protobuf_PROTOC_EXECUTABLE} --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/proto --cpp_out=autogenerated_protobuf ${all_protos}
)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../foxglove-websocket/include)
include_directories(${OpenSSL_INCLUDE_DIR})

link_directories(${CMAKE_CURRENT_BINARY_DIR}/foxglove-websocket)



add_definitions(-DASIO_STANDALONE)
add_library(${PROJECT_NAME} SHARED  ${proto_sources})
target_link_libraries(${PROJECT_NAME} ${Protobuf_LIBRARIES})

#add_executable(example_server_protobuf src/example_server_protobuf.cpp ${proto_sources} )
target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/autogenerated_protobuf)
#target_link_libraries(${PROJECT_NAME}
#        foxglove_websocket
#        protobuf
#        pthread
#        ZLIB::ZLIB
#        ${Boost_LIBRARIES}
#        OpenSSL::SSL
#        OpenSSL::Crypto
#        )
